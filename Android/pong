//trying to make an android application!!!

import ketai.sensors.*;

PVector player, foe, ball;
float ballSpeed_x, ballSpeed_y,foeSpeed;
int playScore = 0;
int foescore = 0;
float ballSize;
KetaiSensor sensor;
float accelX,accelY,accelZ;

void setup()
{
  orientation(LANDSCAPE);
  size(displayWidth,displayHeight);
  ball = new PVector(width/2,height/2);
  player = new PVector(width,height/2);
  foe = new PVector(0,height/2);
  ballSpeed_x = width/100;
  ballSpeed_y = width/100;
  foeSpeed = width/150;
  ballSize = width/20;
  sensor = new KetaiSensor(this);
  sensor.start();
  rectMode(CENTER);
}

void draw()
{
  background(0);
  centerLine();
  drawball();
  drawPlayer();
  drawEnemy();
  score();
  println("-------");
  println("X: " + accelX);
  println("Y: " + accelY);
  println("Z: " + accelZ);
  println("-------");
}

void drawball()
{
  pushMatrix();
  translate(ball.x,ball.y);
  fill(255);
  fill(255*(ball.x/width),255*((width-ball.x)/width),0);
  noStroke();
  ellipse(0,0,width/20,width/20);
  popMatrix();
  
  ball.x += ballSpeed_x;
  ball.y += ballSpeed_y;
  ballBoundary();
}

void ballBoundary()
{
  if (ball.y < 0) {
      ball.y = 0;
      ballSpeed_y *= -1; 
   }
  
   //bottom
   if (ball.y > height) {
      ball.y = height;
      ballSpeed_y *= -1; 
   }

    float playerDist = ball.dist(player);
    
    if (ball.x > width) {
       ball.x = width/2;
       ballSpeed_x *= -1;
       foescore ++;
    }
    
    if (ball.x < 0) {
       ball.x = width/2; 
       ballSpeed_x *= -1;
       playScore ++;
    }
    
    //player
    if (ball.x > width - width/40 - ballSize && ball.x < width && Math.abs(ball.y - player.y) < width/10) {
       ball.x = width - width/40 - ballSize;
       ballSpeed_x *= -1;
    }
    
    //enemy
    if (ball.x < width/40 + ballSize && ball.x > 0 && Math.abs(ball.y - foe.y) < width/10) 
    {
       ball.x = width/40 + ballSize;
       ballSpeed_x *= -1;
    }
}
    void drawPlayer()
    {
      player.y = mouseY;
      pushMatrix();
      translate(player.x+width/20,player.y);
      stroke(0);
      fill(255);
      rect(0,0,width/20,width/5);
      popMatrix();
    }
    
    void drawEnemy()
    {
      foe.y +=foeSpeed;
      pushMatrix();
      translate(foe.x+width/20,foe.y);
      fill(255,0,0);
      rect(0,0,width/20,width/5);
      popMatrix();
    }
      
    
    void AI()
    {
      if(foe.y<ball.y) foeSpeed = width/150;
      if(foe.y>ball.y) foeSpeed = -width/150;
      if(foe.y == ball.y) foeSpeed = 0;
      if(ball.x > width/2) foeSpeed = 0;
    }
    
    void score()
    {
      fill(255);
      textSize(width/20);
      text(foescore,width/10*3,height/5);
      text(playScore,width/10*7,height/5);
    }
    
    void accel(float x, float y,float z)
    {
      accelX = x;
      accelY = y;
      accelZ = z;
    }
    
    void centerLine()
    {
      int numLines = 20;
      for(int i = 0;i<numLines;i++)
      {
        strokeWeight(width/100);
        stroke(255);
        line(width/2, i * width/numLines, width/2, (i+1) * width/numLines - width/40);
        stroke(0,0);
        line(width/2,(i+1)*width/numLines - width/40,width/2,(i+1)*width/numLines);
      }
    }
    
    
